#!/usr/bin/env python3
"""
TFTP daemon script using pyserv and py3tftp (see settings.py for env vars).
"""

import argparse
import os
import sys
from pathlib import Path

import tftpy
from daemon import Daemon
from daemon.parent_logger import setup_logging

from pyserv._version import __version__
from pyserv.settings import (
    DEBUG,
    DOCROOT,
    LOG,
    PID,
    SOCK_TIMEOUT,
    init_dirs,
    platform_check,
)

# from logging_tree import printout  # debug logging
# pylint: disable=R0801


LPNAME = os.getenv('LPNAME', default='tftpd')
IFACE = os.getenv('IFACE', default='0.0.0.0')
PORT = os.getenv('PORT', default='9069')


class ServDaemon(Daemon):
    """
    Init daemon with custom run/cleanup methods, pass user vars to the
    server.
    """

    port = int(PORT)
    server = None
    timeout = int(SOCK_TIMEOUT)

    def run(self):
        """
        Daemon needs a run method.
        """
        self.server = tftpy.TftpServer(DOCROOT)
        self.server.listen(
            listenip=IFACE,
            listenport=self.port,
            timeout=self.timeout,
        )

    def cleanup(self):
        """And we need a cleanup method."""
        self.server.stop()


if __name__ == "__main__":
    if not platform_check():
        raise OSError(f'Incompatible platform type "{sys.platform}"')

    daemon_args = ['start', 'stop', 'restart', 'status']

    parser = argparse.ArgumentParser(
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
        description='Simple TFTP server daemon',
    )
    parser.add_argument(
        "--version", action="version", version=f"tftpdaemon {__version__}"
    )
    parser.add_argument('run', choices=daemon_args, nargs=1)

    args = parser.parse_args()

    init_dirs([Path(LOG).parent, Path(PID).parent])
    setup_logging(DEBUG, Path(LOG), 'tftpd')
    # printout()

    d = ServDaemon(Path(PID), home_dir=DOCROOT, verbose=0, use_cleanup=True)
    getattr(d, args.run[0])()
