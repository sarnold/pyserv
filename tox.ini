[tox]
envlist = py3{6,7,9,10,11}-{linux,macos,windows},coverage
skip_missing_interpreters = true
isolated_build = true
skipsdist = true

[gh-actions]
python =
    3.6: py36
    3.7: py37
    3.9: py39
    3.10: py310
    3.11: py311

[gh-actions:env]
PLATFORM =
    ubuntu-22.04: linux
    ubuntu-20.04: linux
    macos-11: macos
    macos-12: macos
    windows-2019: windows
    windows-latest: windows

[base]
deps =
    pip>=21.1
    versioningit

[build]
deps =
    pip>=21.1
    wheel
    build
    twine

[testenv]
skip_install = true

passenv =
    DISPLAY
    XAUTHORITY
    HOME
    USERNAME
    USER
    XDG_*
    CI
    OS
    PYTHONIOENCODING
    PIP_DOWNLOAD_CACHE

setenv = COVERAGE_FILE=.coverage.{envname}

allowlist_externals =
    bash

deps =
    {[base]deps}
    honcho
    -e .[test,cov]

commands =
    pytest -v --capture=fd . --cov=pyserv --cov-branch --cov-report term-missing pyserv/

[testenv:coverage]
basepython =
    python3

skip_install =
    true

allowlist_externals =
    bash

#setenv =
#    COVERAGE_FILE = .coverage

deps =
    coverage

commands =
    bash -c 'coverage combine .coverage.py*'
    coverage xml

depends =
    py36
    py37
    py39
    py310
    py311

[coverage:run]
parallel=True

[testenv:dev]
skip_install = true

setenv =
    LPNAME = {env:LPNAME:httpd}
    DEBUG = {env:DEBUG:1}
    LOG = {env:LOG:{envlogdir}/{env:LPNAME}.log}
    PID = {env:PID:{envtmpdir}/{env:LPNAME}.pid}
    TAIL = {env:TAIL:1}

passenv =
    HOME
    USERNAME
    USER
    XDG_*
    PYTHONIOENCODING
    PIP_DOWNLOAD_CACHE

allowlist_externals =
    bash
    tail

deps =
    {[base]deps}
    logging_tree
    requests
    honcho
    -e .

commands =
    python -c 'from pyserv.settings import show_uservars; show_uservars()'
    httpdaemon --version
    httpdaemon -h
    httpdaemon start
    bash -c 'sleep 1'
    python tests/check_daemon.py
    tail -n {env:TAIL} {env:LOG}

commands_post =
    httpdaemon stop

[testenv:tftp]
skip_install = true

setenv =
    IFACE = {env:IFACE:0.0.0.0}
    PORT = {env:PORT:9069}
    LPNAME = {env:LPNAME:tftpd}
    DEBUG = {env:DEBUG:1}
    LOG = {env:LOG:{envlogdir}/{env:LPNAME}.log}
    PID = {env:PID:{envtmpdir}/{env:LPNAME}.pid}
    TAIL = {env:TAIL:1}

passenv =
    HOME
    USERNAME
    USER
    XDG_*
    PYTHONIOENCODING
    PIP_DOWNLOAD_CACHE

allowlist_externals =
    bash
    tail

deps =
    {[base]deps}
    logging_tree
    .

commands =
    python -c 'from pyserv.settings import show_uservars; show_uservars()'
    tftpdaemon -h

[testenv:docs]
skip_install = true
allowlist_externals =
    make
    bash

deps =
    {[base]deps}
    .[doc]

commands_pre =
    # need to generate version info in a fresh checkout
    bash -c '[[ -f pyserv/_version.py ]] || python setup.py egg_info'

commands = make -C docs html

[testenv:docs-lint]
skip_install = true
allowlist_externals =
    make

deps =
    {[base]deps}
    .[doc]

commands = make -C docs linkcheck

[testenv:build]
skip_install = true

passenv =
    pythonLocation
    CI
    PYTHONIOENCODING
    PIP_DOWNLOAD_CACHE

deps =
    {[build]deps}

commands =
    python -m build .
    twine check dist/*

[testenv:check]
skip_install = true
allowlist_externals =
    bash

passenv =
    CI
    GITHUB*
    PIP_DOWNLOAD_CACHE

deps =
    pip>=21.1
    requests

commands =
    pip install pyserv --pre -f dist/
    python -c "from pyserv import server; print(server.__doc__)"
    python -c 'from pyserv.settings import show_uservars; show_uservars()'

[testenv:lint]
allowlist_externals =
    bash

passenv =
    CI
    PYTHONIOENCODING

setenv = PYTHONPATH = {toxinidir}

deps =
    {[base]deps}
    -r requirements.txt
    pylint

commands_pre =
    # need to generate version info in a fresh checkout
    bash -c '[[ -f pyserv/_version.py ]] || python setup.py egg_info'

commands =
    pylint --ignore=_version.py --fail-under=9.90 pyserv/ scripts/

[testenv:style]
passenv =
    CI
    OS
    PIP_DOWNLOAD_CACHE

deps =
    {[base]deps}
    flake8
    flake8-bugbear

commands =
    flake8 pyserv/

[testenv:mypy]
skip_install = true

setenv = PYTHONPATH = {toxinidir}

deps =
    {[base]deps}
    -r requirements.txt
    mypy

commands_pre =
    # need to generate version info in a fresh checkout
    bash -c '[[ -f pyserv/_version.py ]] || python setup.py egg_info'

commands =
    python -m mypy --follow-imports=normal --install-types --non-interactive pyserv/ scripts/

[testenv:isort]
skip_install = true

setenv = PYTHONPATH = {toxinidir}

deps =
    {[base]deps}
    isort

commands =
    python -m isort pyserv/ scripts/

[testenv:clean]
skip_install = true
allowlist_externals =
    bash

deps =
    pip>=21.1

commands =
    bash -c 'make -C docs/ clean'
    bash -c 'rm -rf build/ dist/ pyserv.egg-info/ docs/source/api/'
