name: rpm deps

on:
  workflow_dispatch:
  workflow_call:
  pull_request:
  push:
    branches: [ master ]

jobs:
  get_rpms:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      actions: read
    defaults:
      run:
        shell: bash

    steps:
      - name: Download rpm release assets
        run: |
          gh release download daemonizer-1.1.5 --pattern '*.noarch.rpm' -R VCTLabs/el9-rpm-toolbox
          gh release download picotui-1.2.3.2 --pattern '*.noarch.rpm' -R VCTLabs/el9-rpm-toolbox
          gh release download pygtail-0.14.0.3 --pattern '*.noarch.rpm' -R VCTLabs/el9-rpm-toolbox
          gh release download py3tftp-1.3.0 --pattern '*.noarch.rpm' -R VCTLabs/el9-rpm-toolbox
          gh release download tftpy-0.8.6.2 --pattern '*.noarch.rpm' -R VCTLabs/el9-rpm-toolbox
          gh release download pyserv-1.8.7 --pattern '*.noarch.rpm' -R VCTLabs/el9-rpm-toolbox
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: check artifacts
        run: |
          ls -l

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: rpms
          path: |
            python3*.rpm

  get_version:
    name: Get version info
    runs-on: ubuntu-latest
    permissions:
      contents: read
    defaults:
      run:
        shell: bash
    outputs:
      version: ${{ steps.git_ver.outputs.version }}

    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Get package version
        id: git_ver
        run: |
          version=$(git describe --tags | sed -e "s/-\([0-9]*\).*/.post\1/")
          echo "Version from git: ${version}"
          echo "version=${version}" >> $GITHUB_OUTPUT

  dev_rpms:
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        name: [centos9, rocky9]
        include:
          - name: centos9
            image: quay.io/centos/centos:stream9
          - name: rocky9
            image: quay.io/rockylinux/rockylinux:9

    runs-on: ubuntu-latest
    needs: [get_version, get_rpms]
    container:
      image: ${{ matrix.image }}

    permissions:
      contents: read
    defaults:
      run:
        shell: bash
    env:
      PYTHONIOENCODING: utf-8

    steps:
    - uses: actions/checkout@v5
      with:
        fetch-depth: 0

    # Work-around for https://github.com/actions/runner-images/issues/6775
    - name: Change Owner of Container Working Directory
      if: matrix.image
      run: chown root.root .

    # download all artifacts to rpms dir
    - uses: actions/download-artifact@v5
      with:
        name: rpms
        path: rpms

    - name: check artifacts
      run: |
        find . -maxdepth 3 -name \*.rpm

    - name: Check version
      env:
        VERSION: ${{ needs.get_version.outputs.version }}
      run: |
        echo "Dev version from git: ${VERSION}"

    - name: Deps for rpm builds (centos/rocky)
      run: |
        dnf install -y dnf-utils epel-release 'dnf-command(config-manager)'
        dnf config-manager --set-enabled crb
        dnf search --refresh epel
        dnf install -y python3-pip rpms/*.rpm

    - name: Manually create pip cache dir
      run: mkdir -p ~/.cache/pip

    - uses: actions/cache@v4
      id: cache
      env:
        cache-name: cache-pip
      with:
        path: ~/.cache
        key: ${{ matrix.name }}-${{ env.cache-name }}-${{ hashFiles('pyproject.toml') }}
        restore-keys: |
          ${{ matrix.name }}-${{ env.cache-name }}-

    - name: Install dependencies
      run: |
        python3 -m venv .venv
        .venv/bin/pip3 install --upgrade pip
        .venv/bin/pip3 install tox

    - name: Generate SBOM
      run: |
        .venv/bin/tox -e sbom
        .venv/bin/tox -e sys
      env:
        VERSION: ${{ needs.get_version.outputs.version }}

    - name: check artifacts
      run: |
        find . -maxdepth 3 -name \*.json

    - name: Upload rpm sbom files
      uses: actions/upload-artifact@v4
      with:
        name: "pyserv-${{ needs.get_version.outputs.version }}.${{ matrix.name }}-rpm-sbom"
        path: |
          data/*.json
          data/*.txt
