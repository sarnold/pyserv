#!/usr/bin/env python3

import argparse
import datetime
import logging
import os
import sys
from datetime import timezone
from pathlib import Path

from daemon import Daemon
from daemon.parent_logger import setup_logging

from pyserv import GetServer, __version__
from pyserv.settings import DEBUG, LOG, PID, init_dirs, platform_check

logger = logging.getLogger(__name__)


class servDaemon(Daemon):
    def run(self):
        """
        Daemon needs a run method. In this case we need to instantiate
        our GetServer obj here, ie, *after* the Daemon object.
        """
        servd = GetServer(IFACE, PORT, DOCROOT)
        servd.start()

    def cleanup(self):
        """And we need a cleanup method."""
        servd.stop()


if __name__ == "__main__":
    """
    Collect and process command options/arguments and init app dirs
    if needed.
    """
    if not platform_check():
        raise OSError(f'Incompatible platform type "{sys.platform}"')

    daemon_args = ['start', 'stop', 'restart', 'status']

    parser = argparse.ArgumentParser(
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
        description='Threaded HTTP server daemon'
    )
    parser.add_argument('-L', '--logfile', type=str, default=LOG,
                        help='Log file path')
    parser.add_argument('-P', '--pidfile', type=str, default=PID,
                        help='PID file path')
    parser.add_argument('-R', '--rootdir', type=str, default='.',
                        help='Server root directory')
    parser.add_argument('-i', '--iface', type=str, default='',
                        help='Listen address')
    parser.add_argument('-p', '--port', type=int, default=8080,
                        help='Listen port')
    parser.add_argument("--version", action="version",
                        version=f"httpdaemon {__version__}")
    parser.add_argument('run', choices=daemon_args, nargs=1)

    args = parser.parse_args()

    init_dirs([Path(args.logfile).parent, Path(args.pidfile).parent])
    setup_logging(DEBUG, Path(args.logfile), 'httpd')

    PORT = int(args.port)
    IFACE = str(args.iface)
    DOCROOT = str(args.rootdir)

    d = servDaemon(
        args.pidfile,
        home_dir=DOCROOT,
        verbose=0,
        use_cleanup=True
    )
    getattr(d, args.run[0])()
