#!/usr/bin/env python3

import argparse
import datetime
import logging
import os
import sys
from datetime import timezone
from pathlib import Path

from daemon import Daemon
from daemon.parent_logger import setup_logging

from pyserv import GetServer, __version__
from pyserv.settings import (
    DEBUG,
    DOCROOT,
    IFACE,
    LOG,
    PID,
    PORT,
    init_dirs,
    platform_check,
)

logger = logging.getLogger(__name__)


class servDaemon(Daemon):
    def run(self):
        """
        Daemon needs a run method. In this case we need to instantiate
        our GetServer obj here, ie, *after* the Daemon object.
        """
        servd = GetServer(IFACE, PORT, DOCROOT)
        servd.start()

    def cleanup(self):
        """And we need a cleanup method."""
        servd.stop()


if __name__ == "__main__":
    """
    Collect and process environment vars, init directories if needed,
    setup logging. Check if platform is POSIX, then start the daemon.
    """
    if not platform_check():
        raise OSError(f'Incompatible platform type "{sys.platform}"')

    daemon_args = ['start', 'stop', 'restart', 'status']
    init_dirs([Path(LOG).parent, Path(PID).parent])
    setup_logging(DEBUG, Path(LOG), 'httpd')

    parser = argparse.ArgumentParser(
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
        description='Threaded HTTP server daemon',
    )
    parser.add_argument("--version", action="version",
                        version=f"httpdaemon {__version__}")
    parser.add_argument('run', choices=daemon_args, nargs=1)

    args = parser.parse_args()

    init_dirs([Path(LOG).parent, Path(PID).parent])
    setup_logging(DEBUG, Path(LOG), 'httpd')

    d = servDaemon(
        Path(PID),
        home_dir=DOCROOT,
        verbose=0,
        use_cleanup=True
    )
    getattr(d, args.run[0])()
