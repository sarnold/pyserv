#!/usr/bin/env python3
"""
TFTP daemon script using pyserv and py3tftp (see settings.py for env vars).
"""

import argparse
import asyncio
import logging
import os
import sys
from pathlib import Path

from daemon import Daemon
from daemon.parent_logger import setup_logging
from py3tftp.protocols import TFTPServerProtocol

from pyserv import __version__
from pyserv.settings import (
    DEBUG,
    DOCROOT,
    LOG,
    PID,
    get_timeouts,
    init_dirs,
    platform_check,
)

# from logging_tree import printout  # debug logging


IFACE = os.getenv('IFACE', default='0.0.0.0')
PORT = os.getenv('PORT', default='9069')
logger = logging.getLogger(__name__)


def get_async_loop():
    """
    Return async loop and transport bits.
    """

    loop = asyncio.get_event_loop()
    timeouts = get_timeouts()

    listen = loop.create_datagram_endpoint(
        lambda: TFTPServerProtocol(IFACE, loop, timeouts),
        local_addr=(
            IFACE,
            PORT,
        ),
        reuse_port=True,
    )

    transport, protocol = loop.run_until_complete(listen)

    return loop, transport, protocol


class ServDaemon(Daemon):
    """
    Init daemon with custom run/cleanup methods, pass user vars to the
    server.
    """

    loop, transport, protocol = get_async_loop()

    def run(self):
        """
        Daemon needs a run method. In this case we need to instantiate
        our GetServer obj here, ie, *after* the Daemon object.
        """
        self.loop.run_forever()

    def cleanup(self):
        """And we need a cleanup method."""
        self.loop.run_until_complete(self.loop.shutdown_asyncgens())
        self.loop.close()
        self.transport.close()


if __name__ == "__main__":
    if not platform_check():
        raise OSError(f'Incompatible platform type "{sys.platform}"')

    daemon_args = ['start', 'stop', 'restart', 'status']

    parser = argparse.ArgumentParser(
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
        description='Async TFTP server daemon',
    )
    parser.add_argument(
        "--version", action="version", version=f"tftpdaemon {__version__}"
    )
    parser.add_argument('run', choices=daemon_args, nargs=1)

    args = parser.parse_args()

    init_dirs([Path(LOG).parent, Path(PID).parent])
    setup_logging(DEBUG, Path(LOG), 'tftpd')
    # printout()

    d = ServDaemon(Path(PID), home_dir=DOCROOT, verbose=0, use_cleanup=True)
    getattr(d, args.run[0])()
