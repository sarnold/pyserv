[tox]
envlist = py3{9,10,11,12,13}-{linux,macos,windows},coverage
skip_missing_interpreters = true
isolated_build = true
skipsdist = true
min_version = 4.3.3

[gh-actions]
python =
    3.9: py39
    3.10: py310
    3.11: py311
    3.12: py312
    3.13: py313

[gh-actions:env]
PLATFORM =
    ubuntu-latest: linux
    macos-latest: macos
    windows-latest: windows
    ubuntu-22.04: linux
    macos-13: macos
    windows-2019: windows

[base]
deps =
    pip>=23.1
    setuptools_scm[toml]

[build]
deps =
    pip>=23.1
    build
    twine

[testenv]
skip_install = true
install_command = pip install {opts} {packages}

passenv =
    DISPLAY
    XAUTHORITY
    HOME
    USERNAME
    USER
    XDG_*
    CI
    OS
    PYTHONIOENCODING
    PIP_DOWNLOAD_CACHE

setenv =
    COVERAGE_FILE = .coverage.{envname}

allowlist_externals =
    bash

deps =
    {[base]deps}
    -e .[test,cov]

commands =
    python -m pytest -v tests/ --capture={posargs:fd} --cov=pyserv --cov-branch --cov-report term-missing

[testenv:coverage]
basepython =
    python3

skip_install =
    true

allowlist_externals =
    bash

#setenv =
#    COVERAGE_FILE = .coverage

deps =
    coverage

commands =
    bash -c 'coverage combine .coverage.py*'
    coverage xml

depends =
    py39
    py310
    py311
    py312
    py313

[coverage:run]
parallel=True

[testenv:dev]
envdir = {toxinidir}/.venv
skip_install = true

setenv =
    LPNAME = {env:LPNAME:httpd}
    DEBUG = {env:DEBUG:1}
    LOG = {env:LOG:{envlogdir}/{env:LPNAME}.log}
    PID = {env:PID:{envtmpdir}/{env:LPNAME}.pid}
    TAIL = {env:TAIL:1}

passenv =
    HOME
    USERNAME
    USER
    XDG_*
    PYTHONIOENCODING
    PIP_DOWNLOAD_CACHE

allowlist_externals =
    bash
    tail

deps =
    {[base]deps}
    logging_tree
    requests
    honcho
    legacy-cgi
    doorstop @ git+https://github.com/doorstop-dev/doorstop.git@develop
    -e .[dev,tui]

commands =
    python -c 'from pyserv.settings import show_uservars; show_uservars()'
    httpdaemon --version
    httpdaemon -h
    httpdaemon start
    bash -c 'sleep 1'
    python tests/check_daemon.py
    tail -n {env:TAIL} {env:LOG}

commands_post =
    httpdaemon stop

[testenv:{sync,do}]
envdir = {toxinidir}/.sync
# these 2 tox env cmds share a virtual env using the following plugin
# https://github.com/masenf/tox-ignore-env-name-mismatch
runner = ignore_env_name_mismatch

description =
    do: Run a cmd following "--" from the sync .env, e.g. "tox -e do -- repolite --show"
    sync: Install repolite and use it for cloning workflow deps

passenv =
    REPO_CFG
    DISPLAY
    XAUTHORITY
    HOME
    USERNAME
    USER
    CI
    LANG
    LC_COLLATE
    SSH_*
    GID
    UID
    XDG_*
    PIP_DOWNLOAD_CACHE
    PYTHONIOENCODING

deps =
    # logging_tree
    {[base]deps}
    build
    repolite @ https://github.com/sarnold/repolite/releases/download/0.6.2/repolite-0.6.2-py3-none-any.whl

commands =
    sync: repolite {posargs:--quiet}
    do: {posargs:python -c 'print("No cmd provided")'}

[testenv:tftp]
skip_install = true

setenv =
    IFACE = {env:IFACE:0.0.0.0}
    PORT = {env:PORT:9069}
    URL = tftp://{env:IFACE}:{env:PORT}
    LPNAME = {env:LPNAME:tftpd}
    DEBUG = {env:DEBUG:0}
    LOG = {env:LOG:{envlogdir}/{env:LPNAME}.log}
    PID = {env:PID:{envtmpdir}/{env:LPNAME}.pid}
    TAIL = {env:TAIL:5}
    TST_FILE = {env:TST_FILE:testbin.swu}
    BLK_SIZE = {env:BLK_SIZE:8192}

passenv =
    HOME
    USERNAME
    USER
    XDG_*
    PYTHONIOENCODING
    PIP_DOWNLOAD_CACHE

allowlist_externals =
    bash
    cmp
    curl
    ls
    tail

deps =
    {[base]deps}
    logging_tree
    .

commands_pre =
    #python -m pip install .
    -bash -c 'dd if=/dev/zero of=$TST_FILE bs=1M count=40'

commands =
    python -c 'from pyserv.settings import show_uservars; show_uservars()'
    {env:LPNAME}aemon -h
    {env:LPNAME}aemon start
    bash -c 'sleep 2'
    -curl --tftp-blksize {env:BLK_SIZE} --output tests/{env:TST_FILE} {env:URL}/{env:TST_FILE}
    bash -c 'sleep 1'
    tail -n {env:TAIL} {env:LOG}
    cmp {env:TST_FILE} tests/{env:TST_FILE}
    ls -l {env:TST_FILE} tests/{env:TST_FILE}
    bash -c 'rm -f {env:TST_FILE} tests/{env:TST_FILE}'

commands_post =
    {env:LPNAME}aemon stop

[testenv:tftpd]
always_copy = true
skip_install = true

setenv =
    DOCROOT = {env:DOCROOT:tests/data}
    IFACE = {env:IFACE:0.0.0.0}
    PORT = {env:PORT:69}
    URL = tftp://{env:IFACE}:{env:PORT}
    LPNAME = {env:LPNAME:tftpd}
    DEBUG = {env:DEBUG:0}
    LOG = {env:LOG:{envlogdir}/{env:LPNAME}.log}
    PID = {env:PID:{envtmpdir}/{env:LPNAME}.pid}
    TAIL = {env:TAIL:5}
    TST_FILE = {env:TST_FILE:testbin.swu}
    BLK_SIZE = {env:BLK_SIZE:8192}

passenv =
    HOME
    USERNAME
    USER
    XDG_*
    PYTHONIOENCODING
    PIP_DOWNLOAD_CACHE

allowlist_externals =
    bash
    cmp
    curl
    ls
    tail

deps =
    {[base]deps}
    logging_tree
    .

commands_pre =
    #python -m pip install .
    -bash -c 'dd if=/dev/zero of=$DOCROOT/$TST_FILE bs=1M count=40'
    -bash -c 'sudo setcap cap_net_bind_service+ep {envdir}/bin/python'
    -bash -c 'sudo setcap cap_net_bind_service+ep {envdir}/bin/python3'

commands =
    python -c 'from pyserv.settings import show_uservars; show_uservars()'
    {env:LPNAME}aemon -h
    {env:LPNAME}aemon start
    bash -c 'sleep 2'
    -curl --tftp-blksize {env:BLK_SIZE} --output tests/{env:TST_FILE} {env:URL}/{env:TST_FILE}
    bash -c 'sleep 1'
    tail -n {env:TAIL} {env:LOG}
    cmp {env:DOCROOT}/{env:TST_FILE} tests/{env:TST_FILE}
    ls -l {env:DOCROOT}/{env:TST_FILE} tests/{env:TST_FILE}
    bash -c 'rm -f {env:DOCROOT}/{env:TST_FILE} tests/{env:TST_FILE}'

commands_post =
    {env:LPNAME}aemon stop

[testenv:{docs,ldocs,cdocs}]
# these tox env cmds share a virtual env using the following plugin
# https://github.com/masenf/tox-ignore-env-name-mismatch
envdir = {toxworkdir}/docs
runner = ignore_env_name_mismatch
skip_install = true

description =
    docs: Build the docs using sphinx
    ldocs: Lint the docs (mainly link checking)
    cdocs: Clean the docs build artifacts

allowlist_externals =
    make
    bash

deps =
    {[base]deps}
    .[doc]

commands =
    docs: make -C docs html
    ldocs: make -C docs linkcheck
    cdocs: make -C docs clean

[testenv:build]
skip_install = true

passenv =
    pythonLocation
    CI
    PYTHONIOENCODING
    PIP_DOWNLOAD_CACHE

deps =
    {[build]deps}

commands =
    python -m build .
    twine check dist/*

[testenv:check]
skip_install = true
always_copy = False

passenv =
    CI
    GITHUB*
    PIP_DOWNLOAD_CACHE

deps =
    pip>=21.1
    requests

commands =
    python -m pip install pyserv --pre --force-reinstall --prefer-binary -f dist/
    python -m pip show -f pyserv
    python -c "import pyserv; print(pyserv.__description__)"
    python -c 'from pyserv.settings import show_uservars; show_uservars()'

[testenv:lint]
allowlist_externals =
    bash

passenv =
    CI
    PYTHONIOENCODING

setenv = PYTHONPATH = {toxinidir}/src

deps =
    {[base]deps}
    -r requirements.txt
    pylint

commands =
    pylint --fail-under=9.50 src/ scripts/

[testenv:style]
passenv =
    CI
    OS
    PIP_DOWNLOAD_CACHE

deps =
    {[base]deps}
    flake8
    flake8-bugbear

commands =
    flake8 src/

[testenv:mypy]
skip_install = true

setenv = PYTHONPATH = {toxinidir}/src

deps =
    {[base]deps}
    -r requirements.txt
    mypy

commands =
    python -m mypy --follow-imports=normal --install-types --non-interactive src/ scripts/

[testenv:isort]
skip_install = true

setenv = PYTHONPATH = {toxinidir}/src

deps =
    {[base]deps}
    isort

commands =
    python -m isort src/ scripts/

[testenv:reuse]
skip_install = true
passenv =
    PYTHON
    CI
    OS
    PYTHONIOENCODING
    PIP_DOWNLOAD_CACHE

deps =
    {[base]deps}
    reuse
    sbom4python
    .

commands =
    reuse {posargs:"lint"}

[testenv:sec]
skip_install = true
passenv =
    PYTHON
    CI
    OS
    PYTHONIOENCODING
    PIP_DOWNLOAD_CACHE

deps =
    {[base]deps}
    bandit[toml]

commands =
    bandit -c pyproject.toml -r src/

[testenv:changes]
skip_install = true
always_copy = False

allowlist_externals =
    {[testenv:dev]allowlist_externals}

passenv =
    {[testenv:dev]passenv}

deps =
    pip>=21.1
    gitchangelog @ https://github.com/sarnold/gitchangelog/releases/download/3.2.0/gitchangelog-3.2.0-py3-none-any.whl

commands =
    bash -c 'gitchangelog {posargs} > CHANGELOG.rst'

[testenv:clean]
skip_install = true
allowlist_externals =
    bash

deps =
    pip>=21.1

commands =
    bash -c 'rm -rf build/ dist/ __pycache__/ src/*.egg-info/ docs/source/api/ .coverage*'
