#!/usr/bin/env python3
#  type: ignore
"""
Server console UI for pyserv daemon scripts.
"""

import os
import signal
import subprocess as sp
import sys
import threading
import time
from pathlib import Path
from pprint import pprint
from shlex import split

from picotui.context import Context
from picotui.menu import *
from picotui.widgets import *

from pyserv import RepeatTimer
from pyserv.settings import get_userdirs, init_dirs
from pyserv.tui_helpers import get_env, get_log_lines

# Dialog on the screen
d = None
# log lines
NEW_LINES = []
# Daemon env updates
denv = {}
dres = 'NONE'
chk_res_down = "<=/=>"
chk_res_up = "<===>"


def refresh(w):
    """
    Refresh the ``w`` widget with new lines of text and call redraw().

    :param w: picotui Widget that accepts a list of strings
    """
    global NEW_LINES
    NEW_LINES = get_log_lines(LOG, is_tail=False, keep_offset=False, shorten=3)
    w.set(NEW_LINES)
    w.redraw()


def get_pid(pfile):
    """
    Get/check the PID of running daemon.
    """
    pid = ''
    if Path(pfile).exists():
        pid = Path(pfile).read_text(encoding='utf-8').strip()
    return pid


def screen_resize(s):
    """This routine is called on screen resize"""
    global d
    # Widgets in dialog store absolute screen coordinates, so
    # we need to recreate it from scratch for new dimensions.
    d = create_dialog()
    screen_redraw(s)


# This routine is called to redraw screen
def screen_redraw(s):
    """This routine is called to redraw screen"""
    global d
    s.attr_color(C_WHITE, C_BLUE)
    s.cls()
    s.attr_reset()
    d.redraw()


def create_dialog():
    """Creates base settings dialog with usage and navigation buttons."""
    width, height = Screen.screen_size()

    d = Dialog((width - 70) // 2, (height - 22) // 2, 70, 22)

    d.add(20, 1, WLabel("Settings console UI", w=20))
    d.add(40, 1, WLabel("v0.1.0", w=10))

    d.add(2, 3, "Use <TAB> to move between fields and arrow keys to select from")
    d.add(2, 4, "multiple options. Use <SPACE> for checkbox, <ENTER> for buttons.")
    d.add(2, 5, "Note: graphical terminals should also support mouse events.")

    b = WButton(8, "Next")
    d.add(10, 20, b)
    b.finish_dialog = ACTION_OK

    b = WButton(8, "Cancel")
    d.add(52, 20, b)
    b.finish_dialog = ACTION_CANCEL

    return d


def create_run_dialog():
    """Creates base operating dialog with just title and navigation buttons."""
    width, height = Screen.screen_size()

    d = Dialog((width - 70) // 2, (height - 22) // 2, 70, 22)

    d.add(20, 1, WLabel("Server operations UI", w=20))

    b = WButton(8, "Back")
    d.add(10, 20, b)
    b.finish_dialog = ACTION_PREV

    b = WButton(8, "Exit")
    d.add(52, 20, b)
    b.finish_dialog = ACTION_CANCEL

    return d


# init starting values
T_EXIT = False
DAEMON_NAME = 'tftpdaemon'
DAEMON_ENV = get_env(DAEMON_NAME)
LINES = ["No new log lines to display"]


while not T_EXIT:
    # init UI
    with Context():
        d = create_dialog()

        d.add(3, 7, WFrame(30, 6, "Server type"))
        d.add(4, 8, "Select daemon name")
        w_radio = WRadioButton(["tftpdaemon", "atftpdaemon", "httpdaemon"])
        d.add(5, 9, w_radio)

        d.add(35, 7, WFrame(32, 9, "Env settings"))
        d.add(36, 8, "Update daemon defaults")
        w_checkbox = WCheckbox("Debug")
        d.add(37, 9, w_checkbox)

        d.add(37, 10, "Port: ")
        w_port_entry = WTextEntry(5, DAEMON_ENV["PORT"])
        d.add(45, 10, w_port_entry)

        d.add(37, 11, "Device: ")
        w_idev_entry = WTextEntry(15, DAEMON_ENV["IDEV"])
        d.add(45, 11, w_idev_entry)

        d.add(37, 12, "Listen: ")
        w_iface_entry = WTextEntry(15, DAEMON_ENV["IFACE"])
        d.add(45, 12, w_iface_entry)

        def checkbox_changed(w):
            """Update holding env on checkbox change"""
            denv["DEBUG"] = '1' if w.get() else '0'

        def radio_changed(w):
            """Update env and entry widgets on radio button change"""
            dname = w.items[w.choice]
            val = '8080' if dname.startswith('http') else '9069'
            w_port_entry.set(val)
            w_port_entry.redraw()
            denv["PORT"] = val
            denv["LPNAME"] = dname.split('a')[0]

        w_checkbox.on("changed", checkbox_changed)
        w_radio.on("changed", radio_changed)

        screen_redraw(Screen)
        Screen.set_screen_redraw(screen_redraw)
        Screen.set_screen_resize(screen_resize)

        # somewhat silly hack to both move to the first widget *and* avoid
        # a TypeError in widget move_focus
        d.move_focus(1 or None)
        d.move_focus(1 or None)
        res = d.loop()

        # without a changed(w) func, updates happen *after* the loop call
        DAEMON_NAME = w_radio.items[w_radio.choice].strip()
        # we need to pass the name from the selection widget
        DAEMON_ENV = get_env(DAEMON_NAME)

        denv["PORT"] = w_port_entry.get()
        denv["IDEV"] = w_idev_entry.get()
        denv["IFACE"] = w_iface_entry.get()
        if denv:
            DAEMON_ENV.update(denv)
        DEBUG = int(DAEMON_ENV["DEBUG"])

    if res == ACTION_CANCEL:
        print("Canceled...")
        if DEBUG > 0:
            pprint(denv)
        sys.exit(1)

    DNAME = DAEMON_ENV["LPNAME"]
    LOG = str(get_userdirs()[0].joinpath(f'{DNAME}.log'))
    PID = str(get_userdirs()[1].joinpath(f'{DNAME}.pid'))
    DAEMON_ENV.update({"LOG": LOG, "PID": PID, "LAST": 'NONE'})
    os.environ.update(DAEMON_ENV)
    denv.clear()
    init_dirs([Path(LOG).parent])
    NEW_LINES = LINES

    with Context():
        d = create_run_dialog()

        d.add(2, 3, "Use the <Start> <Stop> <Status> buttons to operate the server")
        d.add(2, 5, WFrame(66, 12, "Logs:"))

        l_logs = WMultiEntry(64, 10, NEW_LINES)
        d.add(3, 6, l_logs)
        rt = RepeatTimer(0.25, refresh, l_logs)
        rt.stop()

        def update_server_status(w, t):
            """
            Set the string and color for server status indicator.
            """
            if t.is_running:
                w.t = chk_res_up
                w.valid = True
                w.redraw()
            else:
                w.t = chk_res_down
                w.valid = False
                w.redraw()

        w_daemon_status = WLabel(chk_res_down, w=6)
        d.add(60, 1, w_daemon_status)
        w_daemon_status.validate = True
        update_server_status(w_daemon_status, rt)

        b_start = WButton(8, "Start", color=C_GREEN)
        d.add(15, 17, b_start)

        b_stop = WButton(8, "Stop", color=C_MAGENTA)
        d.add(31, 17, b_stop)

        b_status = WButton(8, "Status", color=C_YELLOW)
        d.add(47, 17, b_status)

        def button_clicked(w):
            """
            Run the command string given by the button widget name attribute.
            The name attribute is the lowercase form of the button text::

              b = WButton(8, "Start")  =>  b.name = start

            :param w: button Widget obj
            """
            if 'status' in w.name and not rt.is_running:
                return
            if 'start' in w.name and rt.is_running:
                return
            if 'start' in w.name and not rt.is_running:
                rt.start()

            btn_cmd_str = f"{DAEMON_NAME} {w.name}"
            try:
                _ = sp.check_output(split(btn_cmd_str), stderr=sp.STDOUT)
            except sp.CalledProcessError:
                pass

            if 'stop' in w.name:
                if rt.is_running:
                    time.sleep(0.3)
                    rt.stop()

            update_server_status(w_daemon_status, rt)
            dres = f'{w.name.upper()}'
            DAEMON_ENV.update({"LAST": dres})

        b_start.on("click", lambda w: button_clicked(b_start))
        b_stop.on("click", lambda w: button_clicked(b_stop))
        b_status.on("click", lambda w: button_clicked(b_status))

        screen_redraw(Screen)
        Screen.set_screen_redraw(screen_redraw)
        Screen.set_screen_resize(screen_resize)

        d.move_focus(2 or None)
        d.move_focus(2 or None)
        res = d.loop()

    if res == ACTION_PREV:
        daemon_pid = get_pid(PID)
        if daemon_pid:
            if rt.is_running:
                rt.stop()
            os.kill(int(daemon_pid), signal.SIGTERM)

    if res == ACTION_CANCEL:
        daemon_pid = get_pid(PID)
        if daemon_pid:
            if rt.is_running:
                rt.stop()
            os.kill(int(daemon_pid), signal.SIGTERM)
        print("Exiting...")
        if DEBUG > 0:
            print(f'Num log lines: {len(NEW_LINES)}')
            pprint(DAEMON_ENV)
        sys.exit(0)
