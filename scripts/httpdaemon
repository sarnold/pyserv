#!/usr/bin/env python3
"""
Http daemon script using pyserv (see settings.py for env vars).
"""

import argparse
import logging
import sys
from pathlib import Path

from daemon import Daemon
from daemon.parent_logger import setup_logging

from pyserv import GetServer, __version__
from pyserv.settings import (
    DEBUG,
    DOCROOT,
    IFACE,
    LOG,
    PID,
    PORT,
    init_dirs,
    platform_check,
)

# from logging_tree import printout  # debug logging


logger = logging.getLogger(__name__)


class ServDaemon(Daemon):
    """
    Init daemon with custom run/cleanup methods, pass user vars to the
    server.
    """
    servd = None

    def run(self):
        """
        Daemon needs a run method. In this case we need to instantiate
        our GetServer obj here, ie, *after* the Daemon object.
        """
        self.servd = GetServer(IFACE, PORT, DOCROOT)
        self.servd.start()

    def cleanup(self):
        """And we need a cleanup method."""
        self.servd.stop()


if __name__ == "__main__":

    if not platform_check():
        raise OSError(f'Incompatible platform type "{sys.platform}"')

    daemon_args = ['start', 'stop', 'restart', 'status']

    parser = argparse.ArgumentParser(
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
        description='Threaded HTTP server daemon',
    )
    parser.add_argument("--version", action="version",
                        version=f"httpdaemon {__version__}")
    parser.add_argument('run', choices=daemon_args, nargs=1)

    args = parser.parse_args()

    init_dirs([Path(LOG).parent, Path(PID).parent])
    setup_logging(DEBUG, Path(LOG), 'httpd')
    # printout()

    d = ServDaemon(
        Path(PID),
        home_dir=DOCROOT,
        verbose=0,
        use_cleanup=True
    )
    getattr(d, args.run[0])()
