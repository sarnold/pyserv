#!/usr/bin/env python3
"""
TFTP daemon script using pyserv and py3tftp (see settings.py for env vars).
"""

import argparse
import os
import sys
from pathlib import Path

from daemon import Daemon
from daemon.parent_logger import setup_logging
from tftpy import TftpServer

from pyserv import __version__
from pyserv.settings import (
    DEBUG,
    SOCK_TIMEOUT,
    get_userdirs,
    init_dirs,
    platform_check,
)

# from logging_tree import printout  # debug logging
# pylint: disable=R0801

DEF_TFTP_PORT = os.getenv('PORT', default='9069')
IFACE = os.getenv('IFACE', default='')
LPNAME = os.getenv('LPNAME', default='tftpd')
LOG = os.getenv('LOG', default=str(get_userdirs()[0].joinpath(f'{LPNAME}.log')))
PID = os.getenv('PID', default=str(get_userdirs()[1].joinpath(f'{LPNAME}.pid')))


def get_docroot():
    """
    We need to santize the server root.
    """
    srv_path = Path(os.getenv('DOCROOT', default=str(get_userdirs()[2])))
    srv_root = srv_path if srv_path.is_absolute() else srv_path.resolve()
    return str(srv_root)


DOCROOT = get_docroot()


class ServDaemon(Daemon):
    """
    Init daemon with custom run/cleanup methods, pass user vars to the
    server.
    """

    cur_dir = '.'
    serv = None

    def run(self):
        """
        Daemon needs a run method.
        """
        self.cur_dir = os.getcwd()
        os.chdir(DOCROOT)
        self.serv = TftpServer('.')
        self.serv.listen(IFACE, int(DEF_TFTP_PORT), int(SOCK_TIMEOUT))

    def cleanup(self):
        """And we need a cleanup method."""
        self.serv.stop()
        os.chdir(self.cur_dir)


if __name__ == "__main__":
    if not platform_check():
        raise OSError(f'Incompatible platform type "{sys.platform}"')

    daemon_args = ['start', 'stop', 'restart', 'status']

    parser = argparse.ArgumentParser(
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
        description='Simple TFTP server daemon',
    )
    parser.add_argument(
        "--version", action="version", version=f"tftpdaemon {__version__}"
    )
    parser.add_argument('run', choices=daemon_args, nargs=1)

    args = parser.parse_args()

    init_dirs([Path(LOG).parent, Path(PID).parent])
    setup_logging(DEBUG, Path(LOG), 'tftpd')
    # printout()
    if DEBUG == '1':
        print(f'LOG: {LOG}')
        print(f'PID: {PID}')
        print(f'DOCROOT: {DOCROOT}')

    d = ServDaemon(Path(PID), home_dir=DOCROOT, verbose=int(DEBUG), use_cleanup=True)
    getattr(d, args.run[0])()
